package main

import (
	"log"
	"strings"
)

func generateComponent(fileName string, funcName string, svgBytes []byte) string {
	fullSvg := string(svgBytes)

	// Find where the children starts
	start := strings.Index(fullSvg, ">") + 1
	if start == -1 {
		log.Fatalf("could not find the start of the svg tag in %s", fileName)
	}

	// Remove the svg tag and format the svg
	svg := fullSvg[start:]
	svg = strings.ReplaceAll(svg, "</svg>", "")
	svg = strings.TrimSpace(svg)
	svg = strings.ReplaceAll(svg, "\n<", "<")
	svg = strings.ReplaceAll(svg, "/>\n", "/>")

	fn := `
		// ` + funcName + ` is the icon from ` + fileName + ` v` + version + ` file
		func ` + funcName + `(children ...gomponents.Node) gomponents.Node {
			return svgWrapper(
				gomponents.Group(children),
				gomponents.Raw(` + "`" + svg + "`" + `),
			)
		}
	`

	return fn
}

func generatePackage(components []string) string {
	pkg := `
		// Code generated by lucide-icons build task. DO NOT EDIT.
		// v` + version + `

		package lucide

		import "github.com/maragudk/gomponents"

		// svgWrapper just creates the svg skeleton following the lucide
		// guidelines. It is used by all the icons.
		//
		// Same as:
		//
		//	<svg
		//		xmlns="http://www.w3.org/2000/svg"
		//		width="24"
		//		height="24"
		//		viewBox="0 0 24 24"
		//		fill="none"
		//		stroke="currentColor"
		//		stroke-width="2"
		//		stroke-linecap="round"
		//		stroke-linejoin="round"
		//	></svg>
		func svgWrapper(children ...gomponents.Node) gomponents.Node {
			return gomponents.El(
				"svg",
				gomponents.Attr("xmlns", "http://www.w3.org/2000/svg"),
				gomponents.Attr("width", "24"),
				gomponents.Attr("height", "24"),
				gomponents.Attr("viewBox", "0 0 24 24"),
				gomponents.Attr("fill", "none"),
				gomponents.Attr("stroke", "currentColor"),
				gomponents.Attr("stroke-width", "2"),
				gomponents.Attr("stroke-linecap", "round"),
				gomponents.Attr("stroke-linejoin", "round"),
				gomponents.Group(children),
			)
		}
	`
	pkg += strings.Join(components, "\n\n")

	return pkg
}
